using Microsoft.Phone.Tasks;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Shapes;
using WP.Core;
using System.Net;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Animation;
using Microsoft.Phone.Controls;
using System.IO;
using System.Windows.Media.Imaging;
using GetMyCard.Model;
using Windows.Storage;
using System.IO.IsolatedStorage;

namespace GetMyCard.ViewModels
{
    public class ViewModelMaCarte : ObservableObject
    {
        #region Fields

        private string _Nom;
        private string _Prenom;
        private ImageSource _MaPhotoBox;
        private string _Mail;
        private string _TelFixe;
        private string _TelPort;
        private string _Nationalite;
        private string _Societe;
        private string _Logo;
        private string _Poste;
        private string _SiteWeb;
        private string _Adresse;
        private string _Ville;
        private string _CP;
        private string _Pays;

        private string _SrcPhoto;

        private string _SrcPhoto;

        private DelegateCommand _ValidateCommand;
        private DelegateCommand _ImportPhotoCommand;
<<<<<<< HEAD
        private DelegateCommand _CameraPhotoCommand;
        private PhotoChooserTask _photoChooserTask;
        
        private PhotoChooserTask _PhotoChooserTask;

        private DelegateCommand _CameraPhotoCommand;
        private PhotoChooserTask _photoChooserTask;
        private CameraCaptureTask _cameraCaptureTask;
        
>>>>>>> f8e64903eef0eb000a044f1cdf38efe700f6220a
        #endregion



        #region Properties

        public string Nom
        {
            get { return _Nom; }
            set { Assign(ref _Nom, value); ValidateCommand.OnCanExecuteChanged(); }
        }

        public string Prenom
        {
            get { return _Prenom; }
            set { Assign(ref _Prenom, value); ValidateCommand.OnCanExecuteChanged(); }
        }

        public ImageSource MaPhotoBox
        {
            get { return _MaPhotoBox; }
            set { Assign(ref _MaPhotoBox, value); }
        }

        public string Mail
        {
            get { return _Mail; }
            set { Assign(ref _Mail, value); }
        }

        public string TelFixe
        {
            get { return _TelFixe; }
            set { Assign(ref _TelFixe, value); }
        }

        public string TelPort
        {
            get { return _TelPort; }
            set { Assign(ref _TelPort, value); }
        }

        public string Nationalite
        {
            get { return _Nationalite; }
            set { Assign(ref _Nationalite, value); }
        }

        public string Societe
        {
            get { return _Societe; }
            set { Assign(ref _Societe, value); }
        }

        public string Logo
        {
            get { return _Logo; }
            set { Assign(ref _Logo, value); }
        }

        public string Poste
        {
            get { return _Poste; }
            set { Assign(ref _Poste, value); }
        }

        public string SiteWeb
        {
            get { return _SiteWeb; }
            set { Assign(ref _SiteWeb, value); }
        }

        public string Adresse
        {
            get { return _Adresse; }
            set { Assign(ref _Adresse, value); }
        }

        public string Ville
        {
            get { return _Ville; }
            set { Assign(ref _Ville, value); }
        }

        public string CP
        {
            get { return _CP; }
            set { Assign(ref _CP, value); }
        }

        public string Pays
        {
            get { return _Pays; }
            set { Assign(ref _Pays, value); }
        }

        public DelegateCommand ValidateCommand
        {
            get { return _ValidateCommand; }
            set { Assign(ref _ValidateCommand, value); }
        }

        public DelegateCommand ImportPhotoCommand
        {
            get { return _ImportPhotoCommand; }
            set { _ImportPhotoCommand = value; }
        }

        public string SrcPhoto
        public DelegateCommand CameraPhotoCommand
        {
            get { return _CameraPhotoCommand; }
            set { _CameraPhotoCommand = value; }
        }
        public string MaPhotoBox
        {
            get {return _ImportPhoto; }
            set { Assign(ref _ImportPhoto, value); }
        }

        public ImageSource MaPhotoBox

<<<<<<< HEAD
=======
        public string SrcPhoto
        {
            get { return _SrcPhoto; }
            set { Assign(ref _SrcPhoto, value); }
        }

>>>>>>> ac4b3bac0418ea4c1b988114f618e0bff3062c58
        #endregion



        #region Constructeur

        public ViewModelMaCarte()
        {
            _ValidateCommand = new DelegateCommand(ExecuteValidate, CanExecuteValidate);
            _ImportPhotoCommand = new DelegateCommand(ExecuteImportPhoto, CanExecuteImportPhoto);

            if(GetMyCardDataContext.Instance.MaCarteVisite.Any())
            {
                MaCarteVisite c = GetMyCardDataContext.Instance.MaCarteVisite.First();

                Nom = c.Nom;
                Prenom = c.Prenom;

                #region verification des info de l'utilisateur
                if (!string.IsNullOrEmpty(c.Photo))
                {
                    BitmapImage retrievedImage = new BitmapImage();
                    using (var isoStore = IsolatedStorageFile.GetUserStoreForApplication())
                    {
                        using (var isoFileStream = isoStore.OpenFile(c.Photo, System.IO.FileMode.Open))
                        {
                            retrievedImage.SetSource(isoFileStream);
                        }

                        MaPhotoBox = retrievedImage;
                    }
                }
                if (!string.IsNullOrEmpty(c.Mail))
                {
                    Mail = c.Mail;
                }
                if (c.TelFixe != 0)
                {
                    TelFixe = c.TelFixe.ToString();
                }
                if (c.TelPort != 0)
                {
                    Mail = c.TelPort.ToString();
                }
                if (!string.IsNullOrEmpty(c.Nationalite))
                {
                    Nationalite = c.Nationalite;
                }
                if (!string.IsNullOrEmpty(c.Societe))
                {
                    Societe = c.Societe;
                }
                if (!string.IsNullOrEmpty(c.Logo))
                {
                    Logo = c.Logo;
                }
                if (!string.IsNullOrEmpty(c.Poste))
                {
                    Poste = c.Poste;
                }
                if (!string.IsNullOrEmpty(c.SiteWeb))
                {
                    SiteWeb = c.SiteWeb;
                }
                if (!string.IsNullOrEmpty(c.Adresse))
                {
                    Adresse = c.Adresse;
                }
                if (!string.IsNullOrEmpty(c.Ville))
                {
                    Ville = c.Ville;
                }
                if (c.CP != 0)
                {
                    CP = c.CP.ToString();
                }
                if (!string.IsNullOrEmpty(c.Pays))
                {
                    Pays = c.Pays;
                }
                #endregion
            }
           
=======
            _CameraPhotoCommand = new DelegateCommand(ExecutecameraPhoto, CanExecuteCameraPhoto);
          
>>>>>>> f8e64903eef0eb000a044f1cdf38efe700f6220a
        }

        #endregion


        #region Methods

        private bool CanExecuteValidate(object parameters)
        {
<<<<<<< HEAD
            return !string.IsNullOrWhiteSpace(Nom) && !string.IsNullOrEmpty(Prenom);
=======
            return !string.IsNullOrWhiteSpace(Nom) || !string.IsNullOrWhiteSpace(Prenom);
>>>>>>> ac4b3bac0418ea4c1b988114f618e0bff3062c58
        }

        private void ExecuteValidate(object parameters)
        {
            MaCarteVisite c;
            MaCarteVisite c = new MaCarteVisite();

            c.Nom = Nom;
            c.Prenom = Prenom;

            if(string.IsNullOrEmpty(Photo))
            {
                c.Photo = Photo;
            }
            if (string.IsNullOrEmpty(Mail))
            {
                c.Mail = Mail;
            }
            if (TelFixe != null)
            {
                c.TelFixe = int.Parse(TelFixe);
            }
            if (TelPort != null)
            {
                c.TelPort = int.Parse(TelPort);
            }
            if (string.IsNullOrEmpty(Nationalite))
            {
                c.Nationalite = Nationalite;
            }
            if (string.IsNullOrEmpty(Societe))
            {
                c.Societe = Societe;
            }
            if (string.IsNullOrEmpty(Logo))
            {
                c.Logo = Logo;
            }
            if (string.IsNullOrEmpty(Poste))
            {
                c.Poste = Poste;
            }
            if (string.IsNullOrEmpty(SiteWeb))
            {
                c.SiteWeb = SiteWeb;
            }
            if (string.IsNullOrEmpty(Adresse))
            {
                c.Adresse = Adresse;
            }
            if (string.IsNullOrEmpty(Ville))
            {
                c.Ville = Ville;
            }
            if (CP != null)
            {
                c.CP = int.Parse(CP);
            }
            if (string.IsNullOrEmpty(Pays))
            {
                c.Pays = Pays;
            }

            /*GetMyCardDataContext.Instance.MaCarteVisite.InsertOnSubmit(c);
            GetMyCardDataContext.Instance.SubmitChanges();*/

            MessageBox.Show("Nom : " + Nom +
                "\nPrénom : " + Prenom +
                "\nPhoto : " + Photo +
                "\nMail : " + Mail +
                "\nTéléphone fixe : " + TelFixe +
                "\nTéléphone portable : " + TelPort +
                "\nNationalité : " + Nationalite +
                "\nLogo : " + Logo +
                "\nPoste : " + Poste +
                "\nSite web : " + SiteWeb +
                "\nAdresse : " + Adresse +
                "\nVille : " + Ville +
                "\nCode postal : " + CP +
                "\n Pays : " + Pays);
                if (!string.IsNullOrEmpty(Photo))

<<<<<<< HEAD
            #region Verification champs
            c.Nom = Nom;
            c.Prenom = Prenom;

            /*if(MaPhotoBox != null)
            {
                c.Photo = MaPhotoBox;
            }*/

            if (!string.IsNullOrEmpty(SrcPhoto))
            {
                c.Photo = SrcPhoto;
            }
            if (!string.IsNullOrEmpty(Mail))
            {
                c.Mail = Mail;
            }
            if (TelFixe != null)
            {
                c.TelFixe = int.Parse(TelFixe);
            }
            if (TelPort != null)
            {
                c.TelPort = int.Parse(TelPort);
            }
            if (!string.IsNullOrEmpty(Nationalite))
            {
                c.Nationalite = Nationalite;
            }
            if (!string.IsNullOrEmpty(Societe))
            {
                c.Societe = Societe;
            }
            if (!string.IsNullOrEmpty(Logo))
            {
                c.Logo = Logo;
            }
            if (!string.IsNullOrEmpty(Poste))
            {
                c.Poste = Poste;
            }
            if (!string.IsNullOrEmpty(SiteWeb))
            {
<<<<<<< HEAD
            _photoChooserTask = new PhotoChooserTask();
            _photoChooserTask.ShowCamera = true;
            _photoChooserTask.Completed += new EventHandler<PhotoResult>(photoChooserTask_Completed);
            _photoChooserTask.Show();
=======
            _PhotoChooserTask = new PhotoChooserTask();
            _PhotoChooserTask.ShowCamera = true;
            _PhotoChooserTask.Completed += new EventHandler<PhotoResult>(photoChooserTask_Completed);
            _PhotoChooserTask.Show();
>>>>>>> 8e9c3b71cf18605b4d72325f5503c65345865a42
            }


            {
                c.Adresse = Adresse;
            }
            if (!string.IsNullOrEmpty(Ville))

            {
                c.Ville = Ville;
            }
            if (CP != null)
            {
                c.CP = int.Parse(CP);
            }
            if (!string.IsNullOrEmpty(Pays))
=======
            if(GetMyCardDataContext.Instance.MaCarteVisite.Any())
        void photoChooserTask_Completed(object sender, Microsoft.Phone.Tasks.PhotoResult MaPhoto)
        {
            if (MaPhoto.TaskResult == TaskResult.OK)
            {
<<<<<<< HEAD

                c.Nom = Nom;
                c.Prenom = Prenom;

                GetMyCardDataContext.Instance.SubmitChanges();
            }
            else
>>>>>>> ac4b3bac0418ea4c1b988114f618e0bff3062c58
            {
                c = new MaCarteVisite();

                c.Nom = Nom;
                c.Prenom = Prenom;

                #region verification des champs

                if (!string.IsNullOrEmpty(SrcPhoto))
                {
                    c.Photo = SrcPhoto;
                if (!string.IsNullOrEmpty(Mail))
                {
                    c.Mail = Mail;
            _PhotoChooserTask.Show();
=======
            _photoChooserTask = new PhotoChooserTask();
            _photoChooserTask.Completed += new EventHandler<PhotoResult>(photoChooserTask_Completed);
            _photoChooserTask.Show();
>>>>>>> f8e64903eef0eb000a044f1cdf38efe700f6220a
                }
                if (!string.IsNullOrEmpty(Nationalite))
                {
                    c.Nationalite = Nationalite;
                }
                if (!string.IsNullOrEmpty(Societe))
                {
                    c.Societe = Societe;
                }
                if (!string.IsNullOrEmpty(Logo))
                {
                    c.Logo = Logo;
                }
                if (!string.IsNullOrEmpty(Poste))
                {
                    c.Poste = Poste;
                }
                if (!string.IsNullOrEmpty(SiteWeb))
                {
                    c.SiteWeb = SiteWeb;
                }
                if (!string.IsNullOrEmpty(Adresse))
                {
                    c.Adresse = Adresse;
                }
                if (!string.IsNullOrEmpty(Ville))
                {
                    c.Ville = Ville;
                }
                if (CP != null)
                {
                    c.CP = int.Parse(CP);
                }
                if (!string.IsNullOrEmpty(Pays))
                {
                    c.Pays = Pays;
                }

                #endregion

                GetMyCardDataContext.Instance.MaCarteVisite.InsertOnSubmit(c);
                GetMyCardDataContext.Instance.SubmitChanges();
            }

            #endregion


            GetMyCardDataContext.Instance.MaCarteVisite.InsertOnSubmit(c);
            GetMyCardDataContext.Instance.SubmitChanges();
            App.RootFrame.GoBack();

            MessageBox.Show(MaPhotoBox.ToString());
=======
            
            App.RootFrame.GoBack();
>>>>>>> ac4b3bac0418ea4c1b988114f618e0bff3062c58
        }


        public void ExecuteImportPhoto(object parameters)
        {
            _PhotoChooserTask = new PhotoChooserTask();
            _PhotoChooserTask.ShowCamera = true;
            _PhotoChooserTask.Completed += new EventHandler<PhotoResult>(photoChooserTask_Completed);
            _PhotoChooserTask.Show();
        }


        public bool CanExecuteImportPhoto(object parameters)
        {
            return true;
        }


        void photoChooserTask_Completed(object sender, Microsoft.Phone.Tasks.PhotoResult MaPhoto)
        {
            if (MaPhoto.TaskResult == TaskResult.OK)
            {
                BitmapImage img = new BitmapImage();
                img.SetSource(MaPhoto.ChosenPhoto);

<<<<<<< HEAD
                SrcPhoto = MaPhoto.OriginalFileName;

=======
                
                //On affiche l'image
>>>>>>> ac4b3bac0418ea4c1b988114f618e0bff3062c58
                MaPhotoBox = img;

                string nomPhoto = System.IO.Path.GetFileName(MaPhoto.OriginalFileName);

                //On sauvegarde le chemin d'accès de l'image
                SrcPhoto = nomPhoto;
                
                //On enregistre l'image dans l'isolated storage
                using(var isoStore = IsolatedStorageFile.GetUserStoreForApplication())
                {
                    var wb = new WriteableBitmap(img);

                    using (var isoFileStream = isoStore.CreateFile(nomPhoto))
                    {
                        Extensions.SaveJpeg(wb, isoFileStream, wb.PixelHeight, wb.PixelWidth, 0, 100);
                    }
                }
            }
        }
        #endregion
    }
}